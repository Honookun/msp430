#! /usr/bin/perl

use strict;
use warnings;
use MIDI;

use Data::Dumper;

my @EvtGet = ("note_on","note_off","instrument_name","track_name","set_tempo");

my $midi =  MIDI::Opus->new( {
     "from_file" => $ARGV[0],
#     "exclusive_event_callback" => sub{print "$_[2]\n"},
     "include" => \@EvtGet
#     "include" => \@MIDI::Event::All_events
   } );

my $track;
my $mtracks;
my $event;
my $currevent;
my $tracknum =0;
my @trackar = ();
my @eventsAr = ();
my @contevents = ();
my @endevents = ();
my $currtime =0;
my $initpause = 0 ;
my $list_ref;
my %notes;
my %notesbfreq;
my @freqbnbr;
my $notename;
my $freq;
my $i;
my $tempo=1;
#print Dumper $midi;

$Data::Dumper::Indent = 0;


sub oldEvtParse {
    
    $currtime =0;
    for $list_ref ( sort { $a->[0] <=> $b->[0] } @eventsAr ) {
	if(@$list_ref[2] eq "note_on"){
	    if($currtime !=@$list_ref[0]){
#print "".($currtime-$initpause).",  @$list_ref[1], Pause, 0, ".((@$list_ref[0]-$currtime))."\n" if($currtime != 0);
		push (@contevents,[0, (@$list_ref[0]-$currtime) ] ); 
	    }
	    $currtime=@$list_ref[0];
	}
	if(@$list_ref[2] eq "note_off"){
	    
	    $initpause = $currtime if ($initpause == 0 && $currtime != 0);  
	    #print "".($currtime-$initpause).", @$list_ref[1], Note, @$list_ref[4], ".(@$list_ref[0]-$currtime) ."\n";
	    push (@contevents,[@$list_ref[4], (@$list_ref[0]-$currtime) ] ); 
	    $currtime=@$list_ref[0];
	}	
    } 
}

sub newEvtParse{
    my $state="note_on";
    my $oldnote=0;
    $currtime =0;
    for $list_ref ( sort { $a->[0] <=> $b->[0] } @eventsAr ) {
	if(@$list_ref[2] eq "note_on"){
	    if($state eq "note_on"){
		$oldnote=@$list_ref[4] if($oldnote == 0);
		push (@contevents,[$oldnote,int((@$list_ref[0]-$currtime)) ] );
		$oldnote=@$list_ref[4];
		$currtime+=int((@$list_ref[0]-$currtime)) ;
	
	    }
	    if($currtime !=@$list_ref[0]){
		push (@contevents,[0, (@$list_ref[0]-$currtime) ] );  
	    }
	    
	    $state = "note_on";
	}else{
	if(@$list_ref[2] eq "note_off"){
	    $initpause = $currtime if ($initpause == 0 && $currtime != 0);  
	    push (@contevents,[@$list_ref[4], (@$list_ref[0]-$currtime) ] );  
	    $state = "note_off";
	}else{
	    print "T:".@$list_ref[1]." ".@$list_ref[2]." ".@$list_ref[3]."\n";
	}
	}
	$currtime=@$list_ref[0];	
    }
}


open my $infile,"<","notes.h" or die "can't open notes.h";
$i=0;
while(<$infile>){
    if(/^\/+\*([^*]+)[^0-9]+([0-9]+)/){
	$notename=$1;
	$freq=$2;
	foreach (split /\//,$notename){
	    chomp;
	    if(!defined $notes{$_} ){
	    $notes{$_} = ($freq+0);
	    }
	}
    }

}

close $infile;


%notesbfreq = reverse %notes;
$i=0;
foreach (sort { $a <=> $b } (keys %notesbfreq)){
    push @freqbnbr, $_;
#    print ("".($_)."->".($i)." ".$notesbfreq{$freqbnbr[$i++]}."\n");
}

if(defined $ARGV[2] ){
    $mtracks = $midi->tracks_r;
    @trackar = splice @$mtracks,$ARGV[2],1;
    $midi->tracks_r(\@trackar);
}
    
foreach $track ($midi->tracks()){
    $currtime =0;
    if(keys $track->events_r){
	print "#$tracknum EV $track->events_r)\n";
	    foreach $event ($track->events){
		
		$currtime += ((@$event[1])*$tempo);
		push (@eventsAr, [$currtime,$tracknum,@$event[0],@$event[2], @$event[3]]);
		# print "$tracknum @$event[0] @$event[1] @$event[2] @$event[3]\n"
		
	    }
	}
	$tracknum++;
}

print Dumper @eventsAr;die();

#oldEvtParse();
newEvtParse();


$currevent = [0,0];

foreach $event (@contevents){
#     print "$event\n";
    if(@$event){
	if(@$currevent[0] == @$event[0]){
	    @$currevent[1] += @$event[1];
	}
	else{
	    push (@endevents,$currevent);
	    $currevent = $event;
	}
   } 
}


open(my $outfile,">","song.h");

print  $outfile "\n#ifndef __SONG_H\n#define __SONG_H\n#define SONG_SIZE ".($ARGV[1]-1)."\nconst unsigned char notes[".($ARGV[1]+0)."]={";
foreach $event (@endevents[0 ... ($ARGV[1]-1)]){
    if(@$event[0] == 0){
	print $outfile "0," if(@$event[1]>0);
    }else{
	if(@$event[1]>0){
	    print $outfile (@$event[0]+1).",";
	}
    }
}
print  $outfile "};\nconst unsigned int durations[".($ARGV[1]+0)."]={";
foreach $event (@endevents[0 ... ($ARGV[1]-1)]){
    if(@$event[1]>0){
	print $outfile int((@$event[1]/1000.0)/(1/32767)).",";
    }

}
print  $outfile "};\n#endif\n";

close $outfile;
