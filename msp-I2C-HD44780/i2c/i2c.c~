#include "i2c.h"






void Setup_i2c_TX(int div,unsigned char addr){
  _DINT();
  RX = 0;
  IE2 &= ~UCB0RXIE;  
  while (UCB0CTL1 & UCTXSTP);               // Ensure stop condition got sent// Disable RX interrupt
  UCB0CTL1 |= UCSWRST;                      // Enable SW reset
  UCB0CTL0 = UCMST + UCMODE_3 + UCSYNC;     // I2C Master, synchronous mode
  UCB0CTL1 = UCSSEL_2 + UCSWRST;            // Use SMCLK, keep SW reset
  //  UCB0BR0 = 13;                             // fSCL = DCO/13 = ~75kHz
  UCB0BR0 = div & 0xff;                             // fSCL = DCO/20 = ~50kHz
  UCB0BR1 = div >> 8;
  UCB0I2CSA = addr;                         // Slave Address is 048h
  UCB0CTL1 &= ~UCSWRST;                     // Clear SW reset, resume operation
  IE2 |= UCB0TXIE;                          // Enable TX interrupt
}
void Setup_i2c_RX(unsigned char addr){
  _DINT();
  RX = 1;
  IE2 &= ~UCB0TXIE;  
  UCB0CTL1 |= UCSWRST;                      // Enable SW reset
  UCB0CTL0 = UCMST + UCMODE_3 + UCSYNC;     // I2C Master, synchronous mode
  UCB0CTL1 = UCSSEL_2 + UCSWRST;            // Use SMCLK, keep SW reset
  //  UCB0BR0 = 13;                             // fSCL = DCO/13 = ~75kHz
  UCB0BR0 = div & 0xff;                             // fSCL = DCO/20 = ~50kHz
  UCB0BR1 = div >> 8;
  UCB0I2CSA = addr;                         // Slave Address is 048h
  UCB0CTL1 &= ~UCSWRST;                     // Clear SW reset, resume operation
  IE2 |=  UCB0RXIE|UCB0TXIE;                          // Enable RX interrupt
}
void Transmit_i2c(unsigned char *TxBuffer,unsigned char TxBuffersz){
  PTxData = TxBuffer;                      // TX array start address
  TXByteCtr = TxBuffersz;                  // Load TX byte counter
  while (UCB0CTL1 & UCTXSTP);             // Ensure stop condition got sent
  UCB0CTL1 |= UCTR + UCTXSTT;             // I2C TX, start condition
  __bis_SR_register(CPUOFF + GIE);        // Enter LPM0 w/ interrupts
}
void Receive_i2c(unsigned char *RxBuffer,unsigned char RxBuffersz){
  PRxData = RxBuffer;    // Start of RX buffer
  RXByteCtr = RxBuffersz-1;              // Load RX byte counter
  while (UCB0CTL1 & UCTXSTP);             // Ensure stop condition got sent
  UCB0CTL1 |= UCTXSTT;                    // I2C start condition
  __bis_SR_register(CPUOFF + GIE);        // Enter LPM0 w/ interrupts
}
